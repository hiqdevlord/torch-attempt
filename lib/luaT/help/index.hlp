Lua Torch C API

luaT provides an API to interface Lua and C in Torch packages. It defines a
concept of _classes_ to Lua for Torch, and provides a mechanism to easily
handle these Lua classes from C.

It additionally provides few functions that =luaL= should have defined, and
redefine some =luaL= functions for better type error printing when using
=luaT= classes.

---+ Memory functions

Classical memory allocation functions which generate a Lua error in case of
problem.

---++ =void* luaT_alloc(lua_State *L, long size)=
#luaT_alloc

Allocates =size= bytes, and return a pointer on the allocated memory. A Lua error will
be generated if running out of memory.

---++ =void* luaT_realloc(lua_State *L, void *ptr, long size)=
#luaT_realloc

Realloc =ptr= to =size= bytes. =ptr= must have been previously allocated
with [[#luaT_alloc][=luaT_alloc=]] or [[#luaT_realloc][=luaT_realloc=]], or
the C =malloc= or =realloc= functions. A Lua error will be generated if
running out of memory.

---++ =void luaT_free(lua_State *L, void *ptr)=
#luaT_free

Free memory allocated at address =ptr=. The memory must have been
previously allocated with [[#luaT_alloc][=luaT_alloc=]] or
[[#luaT_realloc][=luaT_realloc=]], or the C =malloc= or =realloc=
functions.

---+ Class creation and basic handling

A =luaT= class is basically either a Lua _table_ or _userdata_ with an
appropriate _metatable_.  This appropriate metatable, that we call in
this section _root metatable_ is created with [[#luaT_newmetatable][=luaT_newmetatable=]].

The root metatable of a =luaT= object has itself a metatable that we call
_metaclass_. The metaclass is the actual metatable containing all the
methods of the class. If the class inherit from another class, then the
metaclass will itself have a metatable corresponding to the _parent metaclass_:
the metaclasses are cascaded according to the class inheritance.
Multiple inheritance is not supported.

The root metatable of a =luaT= object contains =Lua= operators like =__index=, =__newindex=, =__tostring=,
=__add= (etc...). These operators will respectively look for =__index__=, =__newindex__=, =__tostring__=,
=__add__= (etc...) in the metaclass. If found, the corresponding function or value will be returned, else
a Lua error will be raised.

If one wants to provide =__index__= or =__newindex__= in the metaclass, these operators must follow a particular
scheme:
   * =__index__= must either return a value _and_ =true= or return =false= only. In the first case, it means
   =__index__= was able to handle the given argument (for e.g., the type was correct). The second case means
   it was not able to do anything, so =__index= in the root metatable can then try to see if the metaclass
   contains the required value.

   * =__newindex__= must either return =true= or =false=. As for =__index__=, =true= means it could handle
   the argument and =false= not. If not, the root metatable =__newindex= will then raise an error if
   the object was a userdata, or apply a rawset if the object was a Lua table.

Other metaclass operators like =__tostring__=, =__add__=, etc... do not have any particular constraint.

LUAT_API const void* luaT_newmetatable(lua_State *L, const char *tname, const char *parenttname,
                                       lua_CFunction constructor, lua_CFunction destructor, lua_CFunction factory);

LUAT_API void luaT_pushmetatable(lua_State *L, const void *id);
LUAT_API void luaT_pushmetaclass(lua_State *L, const void *id);
LUAT_API int luaT_getmetaclass(lua_State *L, int index);
